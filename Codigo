class Locomotora {
	var property peso = 1000
	var property arrastreMaximo = 12000
	var property velocidadMaxima = 80
	
	method arrastreUtil(){ return arrastreMaximo - peso }
	method eficiente() { return self.arrastreUtil() >= 5 * peso }
}

class Vagon { 
	method capacidadPasajeros() {return 0}
	method pesoMaximo() { return 0 }
	method vagonLiviano() { return self.pesoMaximo() < 2500 }
}

class VagonPasajeros inherits Vagon 
{
	var property anchoUtil = 2
	var property largo = 10
	override method capacidadPasajeros()
	{
		if (anchoUtil <= 2.5) return largo * 8
		else return largo * 10
	}
	override method pesoMaximo() { return self.capacidadPasajeros() * 80 }
}

class VagonCarga inherits Vagon
{
	var property cargaMaxima = 0
	override method pesoMaximo() { return cargaMaxima + 160 }
}

class Formacion {
  var property vagones = []
  var property locomotoras = []
	// punto 1 //
  /*
	totalPasajeros() se lo pedimos a la clase Formacion, ya que tiene la lista de vagones, con el mensaje sum, sin parametros
	y devuelve la suma de la cantidad de pasajeros que transporta un vagon a traves del mensaje capacidadPasajeros propio del vagon
	*/
	method totalPasajeros() {
		return vagones.sum({vagon => vagon.capacidadPasajeros()})
	}

	// punto 2 // 
	/*
	vagonesLivianos() se lo pedimos a la clase formacion, ya que tiene la lista de vagones, primero con el mensaje filter para obtener la lista
	de los vagones livianos con el mensaje esLiviano propio de los vagones y luego devolvemos el tamaño con el mensaje size
	*/
	method vagonesLivianos() {
		return vagones.filter({vagon => vagon.vagonLiviano()}).size()
	}
	
	// punto 3 //
	/*
	velocidadMaxima() se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras, usamos el mensaje map para obtener la lista con la
	velocidad maxima de cada locomotora y el mensaje min para obtener el menor
	*/
	method velocidadMaxima() {
		return locomotoras.map({locomotora => locomotora.velocidadMaxima()}).min()
	}

	// punto 4 // 
	/*
	eficiente() se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras, usamos el mensaje all para ver si cada una cumple
	lo pedido y el mensaje arrastra5VecesSuPeso propio de la locomotora. Devuelve true o false
	*/
	method eficiente() {
		return locomotoras.all({locomotora => locomotora.eficiente()})
	}
	
	// punto 5 // 
	/*
	Esto se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras y vagones, con el mensaje sum, arrastreUtil propio
	de las locomotoras y pestoTotalVagones, devuelve true o false.
	*/
	method pesoTotalVagones() {return vagones.sum({vagon => vagon.pesoMaximo()})}
	method arrastreUtilTotal() {return locomotoras.sum({locomotora => locomotora.arrastreUtil()})}
	method puedeMoverse() {
		return self.arrastreUtilTotal() >= self.pesoTotalVagones()
	}
	// punto 6 
	/*
	empujeFaltante() se lo pedimos a la clase Formacion, ya que tiene la lista de vagones y locomotoras, con los mensajes puedeMoverse
	pesoTotalVagones y sum. Devuelve 0 en caso de que se pueda mover y sino la resta del pesoTotalVagones con el arrastreUtil de las
	locomotoras
	*/
	method empujeFaltante() {
		if (self.puedeMoverse()) return 0
		else return self.pesoTotalVagones() - self.arrastreUtilTotal()
	}
	// punto 7 
	method vagonMasPesado() {
		return vagones.max({vagon => vagon.pesoMaximo()})
	}
	// punto 8 //
	method cantidadUnidades() { return locomotoras.size() + vagones.size() }
	method pesoTotalLocomotoras() { return locomotoras.sum({locomotora => locomotora.peso()}) }
	method pesoFormacion() { return self.pesoTotalVagones() + self.pesoTotalLocomotoras() }
	
	method formacionCompleja() {
		return self.cantidadUnidades() > 20 or self.pesoFormacion() > 10000;
	}
}

class Deposito {
	var property formaciones = []
	var property locomotorasSueltas = []
	
	// punto 7 //
	/*
	vagonesMasPesados() se lo pedimos a la clase Deposito, ya que tiene la lista de formaciones, usamos los mensajes forEach, y vagonMasPesado 
	propio de la clase Formacion. Devuelve un conjunto con los vagones pesados.
	*/
	method vagonesMasPesados() {
		return formaciones.map({formacion => formacion.vagonMasPesado()})
	}
	// punto 8 //
	/*
	El método necesitaConductorExperimentado() (en la clase Deposito) delega a cada objeto de clase Formacion, perteneciente a la lista de formaciones, el mensaje formacionCompleja().
	Al llamar al método formacionCompleja() este acude a la definición de cantidadUnidades() y a la de pesoFormacion() para returnar su resultado.
	En pesoFormacion() tenemos delegaciones en los métodos pesoTotalVagones() y pesoTotalLocomotoras(), los cuales envían el mensaje peso() a sus respectivos objetos para retornar las sumas.
	*/
	method necesitaConductorExperimentado() {
		return formaciones.any({formacion => formacion.formacionCompleja()})
	}
	// punto 9 //
	/*
	agregarLocomotoraNecesariaParaMoverse(formacion) se lo pedimos a la clase Deposito, ya que cuenta con la lista de formaciones.
	Para empezar nos fijamos el resultado de puedeMoverse() en Formacion, y de no ser verdadero se busca una locomotora posible (con el arrestre suficiente),
	apoyandonos del método formacion.empujeFaltante() de Formacion y arrastreUtil de Locomotora. Luego agregamos dicha locomotora a la formacion.
	*/
	method agregarLocomotoraNecesariaParaMoverse(formacion) {
		if (not formacion.puedeMoverse()) {
			const locomotoraPosible = locomotorasSueltas.find{locomotora => locomotora.arrastreUtil() >= formacion.empujeFaltante()}
			if (locomotoraPosible != null) {
				formacion.locomotoras().add((locomotoraPosible))
			}
		}
	}
}
