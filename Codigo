class Vagon { 
	method capacidadPasajeros() {return 0}
	method pesoMaximo() { return 0 }
	method vagonLiviano() { return self.pesoMaximo() < 2500 }
}

class VagonPasajeros inherits Vagon 
{
	var property anchoUtil = 2
	var property largo = 10
	override method capacidadPasajeros()
	{
		if (anchoUtil <= 2.5) return largo * 8
		else return largo * 10
	}
	override method pesoMaximo() { return self.capacidadPasajeros() * 80 }
}

class VagonCarga inherits Vagon
{
	var property cargaMaxima = 0
	override method pesoMaximo() { return cargaMaxima + 160 }
}

class Formacion {
  var property vagones = []
// punto 1 //
  /*
	totalPasajeros() se lo pedimos a la clase Formacion, ya que tiene la lista de vagones, con el mensaje sum, sin parametros
	y devuelve la suma de la cantidad de pasajeros que transporta un vagon a traves del mensaje capacidadPasajeros propio del vagon
	*/
	method totalPasajeros() {
		return vagones.sum({vagon => vagon.capacidadPasajeros()})
	}
}

// punto 2 // 
	/*
	vagonesLivianos() se lo pedimos a la clase formacion, ya que tiene la lista de vagones, primero con el mensaje filter para obtener la lista
	de los vagones livianos con el mensaje esLiviano propio de los vagones y luego devolvemos el tamaÃ±o con el mensaje size
	*/
	method vagonesLivianos() {
		return vagones.filter({vagon => vagon.vagonLiviano()}).size()
	}
	
// punto 3 //
	/*
	velocidadMaxima() se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras, usamos el mensaje map para obtener la lista con la
	velocidad maxima de cada locomotora y el mensaje min para obtener el menor
	*/
	method velocidadMaxima() {
		return locomotoras.map({locomotora => locomotora.velocidadMaxima()}).min()
	}

// punto 4 // 
	/*
	eficiente() se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras, usamos el mensaje all para ver si cada una cumple
	lo pedido y el mensaje arrastra5VecesSuPeso propio de la locomotora. Devuelve true o false
	*/
	method eficiente() {
		return locomotoras.all({locomotora => locomotora.arrastreUtil() >= 5 * locomotora.peso()})
	}
	
// punto 5 // 
	/*
	Esto se lo pedimos a la clase Formacion, ya que tiene la lista de locomotoras y vagones, con el mensaje sum, arrastreUtil propio
	de las locomotoras y pestoTotalVagones, devuelve true o false.
	*/
	method pesoTotalVagones() {return vagones.sum({vagon => vagon.pesoMaximo()})}
	method arrastreUtilTotal() {return locomotoras.sum({locomotora => locomotora.arrastreUtil()})}
	method puedeMoverse() {
		return self.arrastreUtilTotal() >= self.pesoTotalVagones()
	}
